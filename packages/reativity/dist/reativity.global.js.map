{"version":3,"file":"reativity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reative.ts","../src/ref.ts","../src/computed.ts"],"sourcesContent":["// 判断是否对象\nexport const isObject = (val: unknown): val is Record<any, any> => val !== null && typeof val === 'object';\n// 合并对象\nexport const extend = Object.assign;\n\nexport const isArray = Array.isArray;\n\nexport const isFunction = (val) => typeof val === 'function';\n\nexport const isString = (val) => typeof val === 'string';\nexport const isNumber = (val) => typeof val === 'number';\n\n// 判断是否存在属性\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nexport const hasOwn = (val: object, key: string | symbol): key is keyof typeof val => hasOwnProperty.call(val, key);\n\n// 判断数组的key是不是整数\nexport const isIntegerKey = (key) => isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key;\n\n// 判断两个值是否相同\nexport const hasChanged = (value: any, oldValue: any): boolean => !Object.is(value, oldValue);\n","import { isArray, isIntegerKey } from '@vue/shared';\nimport { TriggerOpTypes } from './operations';\n\nexport function effect(fn, options: any = {}) {\n  const effect = createReactiveEffect(fn, options);\n  // 判断options\n  if (!options.lazy) {\n    console.log('用户没有传递lazy，立即执行一次');\n    effect(); // 默认执行\n  }\n  return effect;\n}\nlet uid = 0; // 记录effect的下标\nlet activeEffect; // 保存当前的effect\nconst effectTrack = []; // 定义一个栈解决嵌套树型结构effect，为了解决当前effect是哪一个\n/*\n[effect1,effect2,effect3]]\neffect(() => {\n  state.name\n  effect(() => {\n    state.age\n    effect(() => {\n      state.a\n    })\n  })\n\n})\n*/\nfunction createReactiveEffect(fn, options) {\n  const effect = function reativeEffect() {\n    if (!effectTrack.includes(effect)) {\n      // 当前创建的effect不存在栈中,创建effect\n      // 没有入栈当前的effect\n      try {\n        // 入栈\n        effectTrack.push(effect);\n        activeEffect = effect;\n        // 响应式effect\n        return fn(); // 执行用户的方法\n      } finally {\n        // 无论是否成功，都执行\n        // 出栈\n        effectTrack.pop();\n        activeEffect = effectTrack[effectTrack.length - 1];\n      }\n    }\n  };\n  effect.id = uid++; // 区别effect\n  effect._isEffect = true; // 区分是否响应\n  effect.raw = fn; // 保存用户方法\n  effect.options = options; // 保存用户配置\n  return effect;\n}\n\n// 收集effect，获取数据的时候触发get 收集effect\nlet targetMap = new WeakMap(); // 创建表\nexport function Track(target, type, key) {\n  console.log('触发收集', '被收集的target==>', target, '被收集的key==>', key);\n  // 1.name ==> effect\n  // key和effect一一对应\n  if (typeof activeEffect === 'undefined') {\n    // 当前对象没有的在effect函数中使用\n    return;\n  }\n  // key===target==属性==>Set[effect,effect]\n  let depMap = targetMap.get(target); //\n  if (!depMap) {\n    targetMap.set(target, (depMap = new Map())); // 添加值\n  }\n  // 当前key\n  let dep = depMap.get(key);\n  // 判断key是否存在，不存在就创建一个set\n  if (!dep) {\n    depMap.set(key, (dep = new Set()));\n  }\n  // 如果当前set不存在当前effect，\n  if (!dep.has(activeEffect)) {\n    // 收集effect，并添加进去\n    dep.add(activeEffect);\n  }\n  console.log('依赖收集完成，当前创建的依赖weakmap==>', targetMap);\n}\n\n// 触发依赖\n// 1.处理对象\nexport function trigger(target, type, key?, newValue?, oldValue?) {\n  // 触发更新\n  const depsMap = targetMap.get(target);\n  // 判断目标对象有没有被收集==> 不是响应的\n  if (!depsMap) return;\n  const effectSet = new Set();\n  // 性能优化如果有多个同时修改一个值，相同就过滤\n  const add = (effectAdd) => {\n    if (effectAdd) {\n      effectAdd.forEach((effect) => {\n        effectSet.add(effect);\n      });\n    }\n  };\n  // 修改数组长度，数组特殊处理\n  if (key === 'length' && isArray(target)) {\n    // proxy在添加数组的时候默认会讲length等属性加入\n    // 在effect中length也被添加依赖\n    // 当用户修改长度，或者修改的下标小于所有数组的下标\n    // 将length和下标的effect放入dep中\n    depsMap.forEach((dep, key) => {\n      if (key === 'length' || key >= newValue) {\n        add(dep);\n      }\n    });\n  } else {\n    // 可能是对象\n    if (key !== undefined) {\n      // 获取当前key下的effect\n      add(depsMap.get(key));\n    }\n    switch (type) {\n      // 如果是新增属性\n      case TriggerOpTypes.ADD:\n        if (isArray(target) && isIntegerKey(key)) {\n          // 如果是个数组且key为整数，就将length的effect加入依赖\n          add(depsMap.get('length'));\n        }\n    }\n  }\n  // 触发effect方法\n  effectSet.forEach((effect: any) => {\n    if (effect.options.scheduler) {\n      // 当前scheduler存在，effect为computed,effect的副作用放在get里\n      effect.options.scheduler();\n    } else {\n      effect();\n    }\n  });\n  // 执行\n}\n","import { hasChanged, hasOwn, isArray, isIntegerKey, isObject } from '@vue/shared';\nimport { Track, trigger } from './effect';\nimport { TrackOpTypes, TriggerOpTypes } from './operations';\nimport { readonly, reative } from './reative';\n// 处理get\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get(target, key, receiver) {\n    const res = Reflect.get(target, key, receiver); // target[key]\n    // 不是只读\n    if (!isReadonly) {\n      // 收集依赖effect,目标对象的key采用的操作get\n      Track(target, TrackOpTypes.GET, key);\n    }\n    // 浅\n    if (shallow) {\n      return res;\n    }\n    // key是一个对象,递归，懒代理，即当访问下一层对象才开始进行拦截，必须被使用\n    if (isObject(res)) {\n      return isReadonly ? readonly(res) : reative(res);\n    }\n    return res;\n  };\n}\n\n// 柯里化，根据不同参数处理逻辑\n// 处理get\nconst get = /*#__PURE__*/ createGetter(); // 深度非只读\nconst shallowGet = /*#__PURE__*/ createGetter(false, true); // 非只读 浅\nconst readonlyGet = /*#__PURE__*/ createGetter(true); // 只读 深度\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true); // 只读 浅\n\n// 处理set,是否浅\nfunction createSetter(shallow = false) {\n  return function set(target, key, value, receiver) {\n    // 存储旧值\n    const oldValue = target[key];\n    // 设置的是数组还是对象，添加值还是修改\n    // 判断是否是数组，proxy的key就是数组的索引，如果key大于length表示新增false,小于表示修改true\n    // 如果是对象，如果存在属性就是修改true，不存在就是新增属性flase\n    let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\n\n    const result = Reflect.set(target, key, value, receiver);\n    if (!hadKey) {\n      // 没有，触发新增数据\n      console.log('当前值为新增，触发set新增==>', key);\n      // 新增 key操作的属性 value 新值\n      trigger(target, TriggerOpTypes.ADD, key, value);\n    } else {\n      // 有，修改值\n      // 如果新值和旧值不相同\n      if (hasChanged(value, oldValue)) {\n        console.log('当前值为修改，触发set修改');\n        trigger(target, TriggerOpTypes.SET, key, value, oldValue);\n      }\n    }\n    return result;\n  };\n}\nconst set = /*#__PURE__*/ createSetter();\nconst shallowSet = /*#__PURE__*/ createSetter(true);\n// 全部代理\nexport const reativeHandlers = {\n  get,\n  set\n};\n// 数据第一层代理\nexport const shallowReactiveHandlers = {\n  get: shallowGet,\n  set: shallowSet\n};\n// 全部只读\nexport const readonlyHandlers = {\n  get: readonlyGet,\n  set: (target, key, value) => {\n    console.error('不可以修改key，只读全部');\n  }\n};\n// 第一层只读\nexport const shallowReativeHandlers = {\n  get: shallowReadonlyGet,\n  set: (target, key, value) => {\n    console.error('不可以修改key只读一层');\n  }\n};\n","import { isObject } from '@vue/shared';\nimport { reativeHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReativeHandlers } from './baseHandlers';\nexport function reative(target) {\n  return createReativeObj(target, false, reativeHandlers);\n}\nexport function shallowReactive(target) {\n  return createReativeObj(target, false, shallowReactiveHandlers);\n}\nexport function readonly(target) {\n  return createReativeObj(target, true, readonlyHandlers);\n}\nexport function shallowReative(target) {\n  return createReativeObj(target, true, shallowReativeHandlers);\n}\n\n// 核心是proxy 采用柯里化根据不同参数处理\n// 创建一个表来存储当前代理的对象\nconst reativeMap = new WeakMap(); // key必须为一个对象 自动垃圾回收\nconst readOnlyMap = new WeakMap(); // key必须为一个对象 自动垃圾回收\n// 创建reative对象，返回一个proxy\nfunction createReativeObj(target, isReadonly, baseHandlers) {\n  if (!isObject(target)) {\n    console.error(\"必须为一个对象\")\n    return target;\n  }\n  console.log('reative传入的值=>', target);\n  // 通过是否只读来创建不同map\n  const proxyMap = isReadonly ? readOnlyMap : reativeMap;\n  const proxyEs = proxyMap.get(target);\n  // 如果已经创建过，就返回已经创建的代理\n  if (proxyEs) {\n    return proxyEs;\n  }\n  // 如果没有，将代理存入表中，并返回\n  const proxy = new Proxy(target, baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\n","import { hasChanged, isArray } from '@vue/shared';\nimport { Track, trigger } from './effect';\nimport { TrackOpTypes, TriggerOpTypes } from './operations';\n\nexport function ref(target) {\n  return createRef(target);\n}\nexport function shallowRef(target) {\n  // 浅，如果是一个对象\n  return createRef(target, true);\n}\n// 创建类RefImpl\nclass RefImpl {\n  public __v_isRef = true; // 标识ref代理\n  public _value;\n  constructor(public rawValue, public shallow) {\n    this._value = rawValue; // 原来的值\n  }\n  // 类的属性访问器,收集依赖track\n  get value() {\n    Track(this, TrackOpTypes.GET, 'value');\n    return this._value;\n  }\n  set value(newValue) {\n    // 修改，触发依赖\n    if (hasChanged(newValue, this._value)) {\n      this._value = newValue;\n      this.rawValue = newValue;\n      console.log('触发set--value');\n      trigger(this, TriggerOpTypes.SET, 'value', newValue);\n    }\n  }\n}\n/**\n * @description: 创建ref，返回实例对象\n * @param {*} rawValue\n * @param {Boolean} shallow\n * @return {Object} RefImpl\n */\nfunction createRef(rawValue, shallow = false) {\n  // 创建ref，返回实例对象\n  return new RefImpl(rawValue, shallow);\n}\n/**\n * @description: 目标对象如果是响应式，返回的属性是响应的，如果是普通的就是普通的\n * @param {Object} target\n * @param {String} key\n * @return {ObjectRefImpl} ObjectRefImpl\n */\nexport function toRef(target, key) {\n  return new ObjectRefImpl(target, key);\n}\n/**\n * @description: toref返回的值，本质是通过模拟value 触发reative的get和set\n * @param {Object} target\n * @param {String} key\n */\nclass ObjectRefImpl {\n  public __v_isRef = true; // 标识ref代理\n  constructor(public target, public key) {}\n  get value() {\n    return this.target[this.key];\n  }\n  set value(newValue) {\n    this.target[this.key] = newValue;\n  }\n}\n/**\n * @description: reative的所有值变成ObjectRefImpl实例\n * @param {object} reative\n * @return {object} Record<string,ObjectRefImpl>\n */\nexport function toRefs(target) {\n  // 遍历当前对象\n  // 如果是数组 new Array\n  let ret = isArray(target) ? new Array(target.length) : {};\n  for (let key in target) {\n    // 将对象变成toref\n    ret[key] = toRef(target, key);\n  }\n  return ret;\n}\n","import { isFunction } from '@vue/shared';\nimport { effect } from '.';\n\n// 计算属性\nexport function computed(getterOrOptions) {\n  // 1.函数 2.对象\n  // 获取数据\n  let getter; // 获取\n  let setter; // 设置\n  if (isFunction(getterOrOptions)) {\n    getter = getterOrOptions;\n    setter = () => {\n      console.warn('computed value must be readonly');\n    };\n  } else {\n    // {get(),set()}\n    // 对象\n    getter = getterOrOptions.get;\n    setter = getterOrOptions.set;\n  }\n  return new ComputedRefImpl(getter, setter);\n}\n\nclass ComputedRefImpl {\n  public _dirty = true; // 默认获取执行\n  public _value;\n  public effect;\n  constructor(getter, public setter) {\n    // 当创建一个computed的时候，就当前的getter作为effect的回调函数\n    // 并且将effect存到自己的effect\n    this.effect = effect(getter, {\n      lazy: true,\n      scheduler: () => {\n        // 当修改数据的时候执行\n        if (!this._dirty) {\n          this._dirty = true;\n        }\n      }\n    });\n  }\n  // 通过.value\n  get value() {\n    // 当获取xxx.value的时候，执行effect函数，吧effect执行后的数据放在_value,并返回这个数据\n    // 如果当前dirty为false，代表当前依赖响应未发生变化，从缓存拿值\n    if (this._dirty) {\n      console.log('进入缓存判断，当前dirty为true，执行effect');\n      this._dirty = false; // 变更为false\n      this._value = this.effect(); // 获取用户的值，只要数据被改变\n    }\n    return this._value;\n  }\n  set value(newValue) {\n    this.setter(newValue);\n  }\n}\n"],"names":[],"mappings":";;;EAAA;EACO,MAAM,QAAQ,GAAG,CAAC,GAAY,KAA8B,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;EAIpG,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;EAE9B,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,UAAU,CAAC;EAEtD,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,QAAQ,CAAC;EAGzD;EACA,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;EAChD,MAAM,MAAM,GAAG,CAAC,GAAW,EAAE,GAAoB,KAA8B,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EAEpH;EACO,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC;EAExH;EACO,MAAM,UAAU,GAAG,CAAC,KAAU,EAAE,QAAa,KAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;;WCjB7E,MAAM,CAAC,EAAE,EAAE,UAAe,EAAE;MAC1C,MAAM,MAAM,GAAG,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;;MAEjD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;UACjB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;UACjC,MAAM,EAAE,CAAC;OACV;MACD,OAAO,MAAM,CAAC;EAChB,CAAC;EACD,IAAI,GAAG,GAAG,CAAC,CAAC;EACZ,IAAI,YAAY,CAAC;EACjB,MAAM,WAAW,GAAG,EAAE,CAAC;EACvB;;;;;;;;;;;;;EAaA,SAAS,oBAAoB,CAAC,EAAE,EAAE,OAAO;MACvC,MAAM,MAAM,GAAG,SAAS,aAAa;UACnC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;;;cAGjC,IAAI;;kBAEF,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;kBACzB,YAAY,GAAG,MAAM,CAAC;;kBAEtB,OAAO,EAAE,EAAE,CAAC;eACb;sBAAS;;;kBAGR,WAAW,CAAC,GAAG,EAAE,CAAC;kBAClB,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;eACpD;WACF;OACF,CAAC;MACF,MAAM,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;MAClB,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;MACxB,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;MAChB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;MACzB,OAAO,MAAM,CAAC;EAChB,CAAC;EAED;EACA,IAAI,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;WACd,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG;MACrC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;;;MAGhE,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;;UAEvC,OAAO;OACR;;MAED,IAAI,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;MACnC,IAAI,CAAC,MAAM,EAAE;UACX,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC;OAC7C;;MAED,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;MAE1B,IAAI,CAAC,GAAG,EAAE;UACR,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC;OACpC;;MAED,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;;UAE1B,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;OACvB;MACD,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;EACrD,CAAC;EAED;EACA;WACgB,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,GAAI,EAAE,QAAS,EAAE,QAAS;;MAE9D,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;MAEtC,IAAI,CAAC,OAAO;UAAE,OAAO;MACrB,MAAM,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;;MAE5B,MAAM,GAAG,GAAG,CAAC,SAAS;UACpB,IAAI,SAAS,EAAE;cACb,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM;kBACvB,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;eACvB,CAAC,CAAC;WACJ;OACF,CAAC;;MAEF,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;;;;;UAKvC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG;cACvB,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,QAAQ,EAAE;kBACvC,GAAG,CAAC,GAAG,CAAC,CAAC;eACV;WACF,CAAC,CAAC;OACJ;WAAM;;UAEL,IAAI,GAAG,KAAK,SAAS,EAAE;;cAErB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;WACvB;UACD,QAAQ,IAAI;;cAEV;kBACE,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE;;sBAExC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;mBAC5B;WACJ;OACF;;MAED,SAAS,CAAC,OAAO,CAAC,CAAC,MAAW;UAC5B,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE;;cAE5B,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;WAC5B;eAAM;cACL,MAAM,EAAE,CAAC;WACV;OACF,CAAC,CAAC;;EAEL;;ECnIA;EACA,SAAS,YAAY,CAAC,UAAU,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK;MACvD,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ;UACvC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;;UAE/C,IAAI,CAAC,UAAU,EAAE;;cAEf,KAAK,CAAC,MAAM,mBAAoB,GAAG,CAAC,CAAC;WACtC;;UAED,IAAI,OAAO,EAAE;cACX,OAAO,GAAG,CAAC;WACZ;;UAED,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;cACjB,OAAO,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;WAClD;UACD,OAAO,GAAG,CAAC;OACZ,CAAC;EACJ,CAAC;EAED;EACA;EACA,MAAM,GAAG,iBAAiB,YAAY,EAAE,CAAC;EACzC,MAAM,UAAU,iBAAiB,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EAC3D,MAAM,WAAW,iBAAiB,YAAY,CAAC,IAAI,CAAC,CAAC;EACrD,MAAM,kBAAkB,iBAAiB,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;EAElE;EACA,SAAS,YAAY,CAAC,OAAO,GAAG,KAAK;MACnC,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ;;UAE9C,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;;;UAI7B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;UAEtG,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;UACzD,IAAI,CAAC,MAAM,EAAE;;cAEX,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;;cAEtC,OAAO,CAAC,MAAM,mBAAsB,GAAG,EAAE,KAAK,CAAC,CAAC;WACjD;eAAM;;;cAGL,IAAI,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;kBAC/B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;kBAC9B,OAAO,CAAC,MAAM,mBAAsB,GAAG,EAAE,KAAe,CAAC,CAAC;eAC3D;WACF;UACD,OAAO,MAAM,CAAC;OACf,CAAC;EACJ,CAAC;EACD,MAAM,GAAG,iBAAiB,YAAY,EAAE,CAAC;EACzC,MAAM,UAAU,iBAAiB,YAAY,CAAC,IAAI,CAAC,CAAC;EACpD;EACO,MAAM,eAAe,GAAG;MAC7B,GAAG;MACH,GAAG;GACJ,CAAC;EACF;EACO,MAAM,uBAAuB,GAAG;MACrC,GAAG,EAAE,UAAU;MACf,GAAG,EAAE,UAAU;GAChB,CAAC;EACF;EACO,MAAM,gBAAgB,GAAG;MAC9B,GAAG,EAAE,WAAW;MAChB,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK;UACtB,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;OAChC;GACF,CAAC;EACF;EACO,MAAM,sBAAsB,GAAG;MACpC,GAAG,EAAE,kBAAkB;MACvB,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK;UACtB,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;OAC/B;GACF;;WClFe,OAAO,CAAC,MAAM;MAC5B,OAAO,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;EAC1D,CAAC;WACe,eAAe,CAAC,MAAM;MACpC,OAAO,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAC;EAClE,CAAC;WACe,QAAQ,CAAC,MAAM;MAC7B,OAAO,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;EAC1D,CAAC;WACe,cAAc,CAAC,MAAM;MACnC,OAAO,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,sBAAsB,CAAC,CAAC;EAChE,CAAC;EAED;EACA;EACA,MAAM,UAAU,GAAG,IAAI,OAAO,EAAE,CAAC;EACjC,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;EAClC;EACA,SAAS,gBAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY;MACxD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;UACrB,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;UACxB,OAAO,MAAM,CAAC;OACf;MACD,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;;MAErC,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,GAAG,UAAU,CAAC;MACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;MAErC,IAAI,OAAO,EAAE;UACX,OAAO,OAAO,CAAC;OAChB;;MAED,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;MAC9C,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;MAC5B,OAAO,KAAK,CAAC;EACf;;WCjCgB,GAAG,CAAC,MAAM;MACxB,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;EAC3B,CAAC;EAKD;EACA,MAAM,OAAO;MAGQ;MAAiB;MAF7B,SAAS,GAAG,IAAI,CAAC;MACjB,MAAM,CAAC;MACd,YAAmB,QAAQ,EAAS,OAAO;UAAxB,aAAQ,GAAR,QAAQ,CAAA;UAAS,YAAO,GAAP,OAAO,CAAA;UACzC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;OACxB;;MAED,IAAI,KAAK;UACP,KAAK,CAAC,IAAI,mBAAoB,OAAO,CAAC,CAAC;UACvC,OAAO,IAAI,CAAC,MAAM,CAAC;OACpB;MACD,IAAI,KAAK,CAAC,QAAQ;;UAEhB,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;cACrC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;cACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;cACzB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;cAC5B,OAAO,CAAC,IAAI,mBAAsB,OAAO,EAAE,QAAQ,CAAC,CAAC;WACtD;OACF;GACF;EACD;;;;;;EAMA,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO,GAAG,KAAK;;MAE1C,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;EACxC,CAAC;EACD;;;;;;WAMgB,KAAK,CAAC,MAAM,EAAE,GAAG;MAC/B,OAAO,IAAI,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACxC,CAAC;EACD;;;;;EAKA,MAAM,aAAa;MAEE;MAAe;MAD3B,SAAS,GAAG,IAAI,CAAC;MACxB,YAAmB,MAAM,EAAS,GAAG;UAAlB,WAAM,GAAN,MAAM,CAAA;UAAS,QAAG,GAAH,GAAG,CAAA;OAAI;MACzC,IAAI,KAAK;UACP,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OAC9B;MACD,IAAI,KAAK,CAAC,QAAQ;UAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;OAClC;GACF;EACD;;;;;WAKgB,MAAM,CAAC,MAAM;;;MAG3B,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;MAC1D,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;;UAEtB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;OAC/B;MACD,OAAO,GAAG,CAAC;EACb;;EC9EA;WACgB,QAAQ,CAAC,eAAe;;;MAGtC,IAAI,MAAM,CAAC;MACX,IAAI,MAAM,CAAC;MACX,IAAI,UAAU,CAAC,eAAe,CAAC,EAAE;UAC/B,MAAM,GAAG,eAAe,CAAC;UACzB,MAAM,GAAG;cACP,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;WACjD,CAAC;OACH;WAAM;;;UAGL,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC;UAC7B,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC;OAC9B;MACD,OAAO,IAAI,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EAC7C,CAAC;EAED,MAAM,eAAe;MAIQ;MAHpB,MAAM,GAAG,IAAI,CAAC;MACd,MAAM,CAAC;MACP,MAAM,CAAC;MACd,YAAY,MAAM,EAAS,MAAM;UAAN,WAAM,GAAN,MAAM,CAAA;;;UAG/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE;cAC3B,IAAI,EAAE,IAAI;cACV,SAAS,EAAE;;kBAET,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;sBAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;mBACpB;eACF;WACF,CAAC,CAAC;OACJ;;MAED,IAAI,KAAK;;;UAGP,IAAI,IAAI,CAAC,MAAM,EAAE;cACf,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;cAC5C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;cACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;WAC7B;UACD,OAAO,IAAI,CAAC,MAAM,CAAC;OACpB;MACD,IAAI,KAAK,CAAC,QAAQ;UAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OACvB;;;;;;;;;;;;;;;;;;;;;"}